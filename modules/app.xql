xquery version "3.0";

module namespace app="http://greatlinkup.com/apps/schema/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://greatlinkup.com/apps/schema/config" at "config.xqm";
import module namespace  functx = "http://www.functx.com" at "functx.xqm";
import module namespace s2bootstrap="http://greatlinkup.com/apps/schema/schema2bootstrap" at "schema2bootstrap.xqm";
import module namespace s2instance="http://greatlinkup.com/apps/schema/schema2instance" at "schema2instance.xqm";
import module namespace sutil="http://greatlinkup.com/apps/schema/sprint-util" at 'sprint-utils.xqm';
import module namespace kwic="http://exist-db.org/xquery/kwic";

declare namespace xs="http://www.w3.org/2001/XMLSchema";
declare namespace xf="http://www.w3.org/2002/xforms";
declare namespace ev="http://www.w3.org/2001/xml-events";
declare namespace bfc="http://betterform.sourceforge.net/xforms/controls";
declare namespace bf="http://betterform.sourceforge.net/xforms";

declare variable $exist:path external;
declare variable $exist:resource external;
declare variable $exist:controller external;
declare variable $exist:prefix external;
declare variable $exist:root external;

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the class attribute <code>class="app:test"</code>.</p>
};

declare function app:search-query($node as node(), $model as map(*)) {
    request:get-parameter('q', '')
};

declare function app:search($node as node(), $model as map(*)) {
    let $q := request:get-parameter('q', '')
    let $results := subsequence(collection('/db/apps/schema/data/S-6-4/schemas')/*//*[ft:query(*, $q)], 1, 50)
    return for $result in $results
            let $upper := $result/..
            where not($upper/name() = 'xs:schema')
            return s2bootstrap:process-node($upper, map:new())
};

declare function app:menu($node as node(), $model as map(*)) {
    <ul class="nav navbar-nav">
        <li class="active">
            <a href="./schemas">Schemas</a>
        </li>{
        element { 'li' } {
        (:
             if ($exist:resource = 'subscriptions.html') 
             then attribute {'class'} {"active"} else (),
         :)
             element { 'a' } {
                attribute { 'href' } { "./subscriptions.html" },
                'Subscriptions'
             }
        }
        }<li class="dropdown">
            <a href="./admin.html" class="dropdown-toggle" data-toggle="dropdown">Admin <b class="caret"/>
            </a>
            <ul class="dropdown-menu">
                <li>
                    <a href="./admin/upload.html">Upload</a>
                </li>
                <li>
                    <a href="./admin/filter2.html">Filtered List</a>
                </li>
                <li>
                    <a href="./admin/start-sprint.html">Start Sprint</a>
                </li>
            </ul>
        </li>
    </ul>
};

declare function app:username($node as node(), $model as map(*)) {
    let $user:= request:get-attribute("com.greatlinkup.schema.user")
    let $name := if ($user) then sm:get-account-metadata($user, xs:anyURI('http://axschema.org/namePerson')) else 'Guest'
    return if ($name) then $name else $user
};

declare function app:login($node as node(), $model as map(*)) {
    let $user:= request:get-attribute("com.greatlinkup.schema.user")
    return if ($user) then <a href="index.html?logout=true" class="btn btn-default">&#215;</a> else <a data-toggle="modal" href="#loginModal" class="btn btn-default">Login</a>                        
};

declare function app:login-panel($node as node(), $model as map(*)) {
    if (request:get-attribute("com.greatlinkup.schema.user")) then () else
    (
        <!-- Modal -->,
        <div class="modal fade" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <form method="POST" class="form-horizontal">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button>
                            <h4 class="modal-title">Login</h4>
                        </div>
                        <div class="modal-body">
                                <div class="control-group">
                                    <label class="control-label" for="user">User:</label>
                                    <div class="controls">
                                        <input type="text" name="user" required="required"/>
                                    </div>
                                </div>
                                <div class="control-group">
                                    <label class="control-label" for="password">Password:</label>
                                    <div class="controls">
                                        <input type="password" name="password"/>
                                    </div>
                                </div>
                                <div class="control-group">
                                    <div class="controls">
                                        <label class="checkbox">
                                            <input type="checkbox" name="duration" value="P14D"/> Remember me for 2 weeks
                                        </label>
                                    </div>
                                </div>
                        </div>
                        <div class="modal-footer">
                                    <button class="btn btn-primary" type="submit">Login</button>
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div><!-- /.modal-content -->
                </form>
            </div><!-- /.modal-dialog -->
        </div>,
        <!-- /.modal -->
        )
};

declare function app:sprint-list($node as node(), $model as map(*)) {
    let $sprint := request:get-parameter('sprint', 'stable')
    let $sprints := sutil:sprint-sequence-descending()
    return
            <table class="table table-condensed">
                    {
                        if (($sprint eq 'working') or ($sprint eq $sprints[1])) 
                        then <tr><td><b><a href="working">Working</a> (<a href="{$sprints[1]}">{$sprints[1]}</a>)</b></td></tr>
                        else <tr><td><a href="working">Working</a> (<a href="{$sprints[1]}">{$sprints[1]}</a>)</td></tr>
                    }
                    {
                        let $asprint := $sprints[2]
                        return
                        if (($sprint eq 'stable') or ($sprint eq $asprint)) 
                        then <tr><td><b><a href="stable">Stable</a> (<a href="{$asprint}">{$asprint}</a>)</b></td></tr>
                        else <tr><td><a href="stable">Stable</a> (<a href="{$asprint}">{$asprint}</a>)</td></tr>
                    }
                {for $asprint in subsequence($sprints, 3)
                return
                        if ($asprint = $sprint)
                        then <tr><td><b><a href="{$asprint}">{$asprint}</a></b></td></tr>
                        else <tr><td><a href="{$asprint}">{$asprint}</a></td></tr>
                }
            </table>
};

declare function app:create-popover($columns as xs:integer, $sprint as xs:string, $schema as xs:string)
{
    let $nl := "&#10;"
    let $nbsp := "&#160;"
    let $doc := doc(sutil:sprint-collection($sprint) || '/schemas/' || $schema || '.xsd')/xs:schema
    let $content := for $node in $doc/xs:annotation/xs:documentation
                    return
                        if (functx:has-simple-content($node)) 
                        then for $foo in tokenize($node/text(), "\n") return <p>{replace($foo, "^\s+", $nbsp)}</p> 
                        else $node/*
    return if ($content)
    then
    <div xmlns="http://www.w3.org/1999/xhtml" id="popover-{$columns}-{$schema}-content" class="popSourceBlock">
        <div class="popTitle">About Schema</div>
        <div class="popContent">{$content}</div>
    </div>
    else ()
};

declare function app:current-sprint($node as node(), $model as map(*))
{
    request:get-parameter('sprint', 'stable')
};

declare function app:schema-row($sprint as xs:string, $schema as xs:string, $edit as xs:boolean)
{
    let $user := request:get-attribute("com.greatlinkup.schema.user")
    let $subscribe-user := doc(sutil:control-dir($sprint) || '/subscription.xml')//user[@name eq $user]
    let $subscription := if ($subscribe-user/schema[@name eq $schema || ".xsd"]) then true() else false()
    let $schemaFile := doc(sutil:schema-dir($sprint) || '/' || $schema || ".xsd")//xs:schema
    return
    <tr>
        <td>{$schema}</td>
        <td>{$schemaFile/@targetNamespace/string()}</td>
        <td>{substring($schemaFile/@elementFormDefault/string(),1,1)}</td>
        <td>{substring($schemaFile/@attributeFormDefault/string(),1,1)}</td>
        {if ($schemaFile/xs:annotation/xs:documentation and ((functx:has-simple-content($schemaFile/xs:annotation/xs:documentation)) or ($schemaFile/xs:annotation/xs:documentation/*)))
        then <td><span id="popover-1-{$schema}" class="glyphicon glyphicon-info-sign pop" data-toggle="popover"></span></td>
        else <td/>}
        {if ($user) then if ($subscription) 
        then <td><span class="glyphicon glyphicon-star"></span></td>
        else <td><span class="glyphicon glyphicon-star-empty"></span></td> else ()}
        <td><a href="../doc/{$sprint}/{$schema}"><span class="glyphicon glyphicon-fullscreen"></span></a></td>
        {if (($sprint = 'working') or ($sprint = 'stable'))
        then <td><a href="../schema/{$sprint}/{$schema}.xsd"><span class="glyphicon glyphicon-link"></span></a></td>
        else <td/>}
        {if ($edit) 
        then <td><span class="glyphicon glyphicon-edit"></span></td>
        else <td/>}
    </tr>
};

declare function app:sprint-schemas($node as node(), $model as map(*), $columns as xs:integer) {
    let $sprint := request:get-parameter('sprint', 'stable')
    let $log := util:log-app('info', 'eim', 'Sprint: ' || $sprint || ' Columns: ' || $columns)
    let $schemas := for $schema in if (sutil:sprint-collection($sprint)) then xmldb:get-child-resources(sutil:sprint-collection($sprint) || '/schemas') else ()
                    order by $schema
                    return fn:substring-before($schema, ".xsd")
    let $top := count($schemas) (: math:ceil(count($schemas) div $columns) * $columns :)
    let $col-top := xs:integer($top div $columns)
    let $table :=   <table class="table table-striped">
                        <tr>
                            <th colspan="2" text-align="center">Schema <span class="label label-default">{count($schemas)}</span></th>
                            <th>E</th>
                            <th>A</th>
                            <th colspan="5"/>
                        </tr>
                        { for $schema in $schemas
                            return app:schema-row($sprint, $schema, false())
                        }
                    </table>
    let $popups := for $schema in $schemas
                    return app:create-popover($columns, $sprint, $schema)
    return (<span class="label label-default">{$sprint}</span>,$table, $popups)
};

declare %private function app:get-schema()
{
    let $sprint := request:get-parameter('sprint', '')
    let $schema := request:get-parameter('schema', '')
    return sutil:sprint-collection($sprint) || '/schemas/' || $schema || '.xsd'
};

declare function app:schema-doc($node as node(), $model as map(*), $sprint as xs:string, $schema as xs:string, $entity as xs:string?)
{
    if ($entity)
    then app:item-detail($node, $model)
    else app:schema($node, $model)
};
 (:~
 : This templating function displays the index to the XML Schema documentation. It will be called by the templating module if
 : it encounters an HTML element with a class attribute: class="app:schema".
 : 
 : @param $node the HTML node with the class attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:schema($node as node(), $model as map(*)) {
    let $schema:= app:get-schema()
    let $doc := doc($schema)
    let $documentation := for $note in $doc/xs:schema/xs:annotation/xs:documentation
                            return s2bootstrap:documentation($note, map:new())
    
    return
    (<h2>{request:get-parameter('schema', '')}</h2>,
    $documentation,
    if ($doc/*/xs:import)
    then <div class="panel panel-default">
            <div class="panel-heading">Imports</div>
            <table class="table table-striped">{
                for $element in $doc/*/xs:import
                return s2bootstrap:import($element, map:entry('sprint', request:get-parameter('sprint', 'stable')))}
            </table>
        </div> 
    else (),
    <div class="panel panel-default">
        <div class="panel-heading">Items</div>
        <table class="table table-striped">{
            for $element in $doc/*/*[@name]
            order by $element/@name/string()
            return s2bootstrap:display-list-item($element, map:new())}
        </table>
    </div>,
    if ($doc/*/xs:import)
    then <div class="panel panel-default">
            <div class="panel-heading">Imported Items</div>
            <table class="table table-striped">{
                for $ref in $doc//*[starts-with(string(@ref), 'canonical:')]
                return s2bootstrap:display-list-item($ref, map:new())}
            </table>
        </div> 
    else ()
    )
};

 (:~
 : This templating function displays the XML Schema item's documentation. It will be called by the templating module if
 : it encounters an HTML element with a class attribute: class="app:item-detail".
 : 
 : @param $node the HTML node with the class attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:item-detail($node as node(), $model as map(*)) {

    let $schema:= app:get-schema()
    let $doc := doc($schema)
    let $root := $doc//*[@name eq request:get-parameter('entity', '') and local-name(.) eq request:get-parameter('type', '')]
    
    return if (contains($schema, 'docbook')) 
            then () 
            else 
                try { 
                    s2bootstrap:process-node($root, map:new()) 
                    } 
                catch * { 
                    <div class="alert alert-error">Problem in the processing of this XML Schema</div>
                    }
};

 (:~
 : This templating function displays the XML Schema item's graphical view dimensions in SVG. It will be called by the templating module if
 : it encounters an HTML element with a class attribute: class="app:svgdim".
 : 
 : @param $node the HTML node with the class attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
 declare function  app:instance($node as node(), $model as map(*)) {
    try {
    let $schema:= app:get-schema()
    let $doc := doc($schema)
    let $root := $doc//*[@name eq request:get-parameter('entity', '') and local-name(.) eq request:get-parameter('type', '')]
    let $elem := util:serialize(s2instance:process-node($root, map:new()),"method=xml")
    return if (contains($schema, 'docbook')) then () else <pre class="highlight">
            { replace($elem, "^\s+", "") }
            </pre>
 } catch * { <div class="alert alert-error">Problem in the processing of this XML Schema</div>}
 };


declare function app:new-sprint-table($node as node(), $model as map(*)) {
    let $sprints := sutil:sprint-sequence-descending()
    return
        <table class="table">
            <tbody>
                <tr><th>New</th><td>{sutil:next-sprint($sprints[1])}</td></tr>
                <tr><th>Working</th><td>{$sprints[1]}</td></tr>
                <tr><th>Stable</th><td>{$sprints[2]}</td></tr>
            </tbody>
        </table>
};

